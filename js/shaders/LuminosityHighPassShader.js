!function(){const t={shaderID:"luminosityHighPass",uniforms:{tDiffuse:{value:null},luminosityThreshold:{value:1},smoothWidth:{value:1},defaultColor:{value:new THREE.Color(0)},defaultOpacity:{value:0}},vertexShader:"\n\t\n\t\t\tvarying vec2 vUv;\n\t\n\t\t\tvoid main() {\n\t\n\t\t\t\tvUv = uv;\n\t\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\n\t\t\t}",fragmentShader:"\n\t\n\t\t\tuniform sampler2D tDiffuse;\n\t\t\tuniform vec3 defaultColor;\n\t\t\tuniform float defaultOpacity;\n\t\t\tuniform float luminosityThreshold;\n\t\t\tuniform float smoothWidth;\n\t\n\t\t\tvarying vec2 vUv;\n\t\n\t\t\tvoid main() {\n\t\n\t\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\n\t\t\t\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\n\t\n\t\t\t\tfloat v = dot( texel.xyz, luma );\n\t\n\t\t\t\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n\t\n\t\t\t\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n\t\n\t\t\t\tgl_FragColor = mix( outputColor, texel, alpha );\n\t\n\t\t\t}"};THREE.LuminosityHighPassShader=t}();